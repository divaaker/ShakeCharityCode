//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2ApexPremier {
    public Integer code;
    public String message;
    public Integer took;
    public List<Errors> errors;
    public Data data;
    public static void consumeObject(JSONParser parser) {
        Integer depth = 0;
        do {
            JSONToken curr = parser.getCurrentToken();
            if (curr == JSONToken.START_OBJECT || 
                curr == JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == JSONToken.END_OBJECT ||
                curr == JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    public class Formerly_known_as {
        public String former_name {get;set;} 
        public String year {get;set;} 

        public Formerly_known_as(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'former_name') {
                            former_name = parser.getText();
                        } else if (text == 'year') {
                            year = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Formerly_known_as consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Sic_codes {
        public String sic_code {get;set;} 
        public String sic_description {get;set;} 

        public Sic_codes(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'sic_code') {
                            sic_code = parser.getText();
                        } else if (text == 'sic_description') {
                            sic_description = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Sic_codes consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Subcategories {
        public String subcategory {get;set;} 
        public List<Staff_levels> staff_levels {get;set;} 

        public Subcategories(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'subcategory') {
                            subcategory = parser.getText();
                        } else if (text == 'staff_levels') {
                            staff_levels = new List<Staff_levels>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                staff_levels.add(new Staff_levels(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Subcategories consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class JSON2Apex {
        public Integer code {get;set;} 
        public String message {get;set;} 
        public Integer took {get;set;} 
        public List<Errors> errors {get;set;} 
        public Data data {get;set;} 

        public JSON2Apex(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'code') {
                            code = parser.getIntegerValue();
                        } else if (text == 'message') {
                            message = parser.getText();
                        } else if (text == 'took') {
                            took = parser.getIntegerValue();
                        } else if (text == 'errors') {
                            errors = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                errors.add(new Errors(parser));
                            }
                        } else if (text == 'data') {
                            data = new Data(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Staff_levels {
        public String staff_level {get;set;} 
        public Object count {get;set;} 

        public Staff_levels(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'staff_level') {
                            staff_level = parser.getText();
                        } else if (text == 'count') {
                            //count = new Object(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Staff_levels consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Annual_reports {
        public String doc_name {get;set;} 
        public String contents {get;set;} 
        public String year {get;set;} 
        public String url {get;set;} 

        public Annual_reports(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'doc_name') {
                            doc_name = parser.getText();
                        } else if (text == 'contents') {
                            contents = parser.getText();
                        } else if (text == 'year') {
                            year = parser.getText();
                        } else if (text == 'url') {
                            url = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Annual_reports consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Telephone_numbers {
        public String telephone_number {get;set;} 
        public String telephone_type {get;set;} 

        public Telephone_numbers(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'telephone_number') {
                            telephone_number = parser.getText();
                        } else if (text == 'telephone_type') {
                            telephone_type = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Telephone_numbers consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Videos {
        public String video_caption {get;set;} 
        public String video_url {get;set;} 

        public Videos(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'video_caption') {
                            video_caption = parser.getText();
                        } else if (text == 'video_url') {
                            video_url = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Videos consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Addresses {
        public String address_line_1 {get;set;} 
        public String address_line_2 {get;set;} 
        public String city {get;set;} 
        public String state {get;set;} 
        public String postal_code {get;set;} 
        public String country {get;set;} 
        public String address_type {get;set;} 

        public Addresses(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'address_line_1') {
                            address_line_1 = parser.getText();
                        } else if (text == 'address_line_2') {
                            address_line_2 = parser.getText();
                        } else if (text == 'city') {
                            city = parser.getText();
                        } else if (text == 'state') {
                            state = parser.getText();
                        } else if (text == 'postal_code') {
                            postal_code = parser.getText();
                        } else if (text == 'country') {
                            country = parser.getText();
                        } else if (text == 'address_type') {
                            address_type = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Addresses consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Letters_of_determination {
        public String letter_of_determination_doc_name {get;set;} 
        public String letter_of_determination_url {get;set;} 

        public Letters_of_determination(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'letter_of_determination_doc_name') {
                            letter_of_determination_doc_name = parser.getText();
                        } else if (text == 'letter_of_determination_url') {
                            letter_of_determination_url = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Letters_of_determination consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Photos {
        public String picture_url {get;set;} 
        public String caption {get;set;} 

        public Photos(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'picture_url') {
                            picture_url = parser.getText();
                        } else if (text == 'caption') {
                            caption = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Photos consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Charitycheck {
        public String organization_id {get;set;} 
        public String organization_info_last_modified {get;set;} 
        public String ein {get;set;} 
        public String organization_name {get;set;} 
        public String organization_name_aka {get;set;} 
        public String address_line1 {get;set;} 
        public String address_line2 {get;set;} 
        public String city {get;set;} 
        public String state {get;set;} 
        public String state_name {get;set;} 
        public String zip {get;set;} 
        public String filing_req_code {get;set;} 
        public String charity_check_last_modified {get;set;} 
        public Object pub78_church_message {get;set;} 
        public String pub78_organization_name {get;set;} 
        public String pub78_ein {get;set;} 
        public String pub78_verified {get;set;} 
        public String pub78_city {get;set;} 
        public String pub78_state {get;set;} 
        public String pub78_indicator {get;set;} 
        public List<Organization_types> organization_types {get;set;} 
        public String most_recent_pub78 {get;set;} 
        public String most_recent_irb {get;set;} 
        public Object bmf_church_message {get;set;} 
        public String bmf_organization_name {get;set;} 
        public String bmf_ein {get;set;} 
        public String bmf_status {get;set;} 
        public String most_recent_bmf {get;set;} 
        public String bmf_subsection {get;set;} 
        public String subsection_description {get;set;} 
        public String foundation_code {get;set;} 
        public String foundation_code_description {get;set;} 
        public String ruling_month {get;set;} 
        public String ruling_year {get;set;} 
        public String adv_ruling_month {get;set;} 
        public String adv_ruling_year {get;set;} 
        public String group_exemption {get;set;} 
        public String exempt_status_code {get;set;} 
        public String ofac_status {get;set;} 
        public String revocation_code {get;set;} 
        public String revocation_date {get;set;} 
        public String reinstatement_date {get;set;} 
        public String irs_bmf_pub78_conflict {get;set;} 
        public String foundation_509a_status {get;set;} 
        public String irb_organization_id {get;set;} 
        public String bulletin_number {get;set;} 
        public String bulletin_url {get;set;} 
        public String effective_date {get;set;} 
        public String irb_last_modified {get;set;} 
        public String report_date {get;set;} 
        public String foundation_type_code {get;set;} 
        public String foundation_type_description {get;set;} 
        public List<Errors> parent_organizations {get;set;} 

        public Charitycheck(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'organization_id') {
                            organization_id = parser.getText();
                        } else if (text == 'organization_info_last_modified') {
                            organization_info_last_modified = parser.getText();
                        } else if (text == 'ein') {
                            ein = parser.getText();
                        } else if (text == 'organization_name') {
                            organization_name = parser.getText();
                        } else if (text == 'organization_name_aka') {
                            organization_name_aka = parser.getText();
                        } else if (text == 'address_line1') {
                            address_line1 = parser.getText();
                        } else if (text == 'address_line2') {
                            address_line2 = parser.getText();
                        } else if (text == 'city') {
                            city = parser.getText();
                        } else if (text == 'state') {
                            state = parser.getText();
                        } else if (text == 'state_name') {
                            state_name = parser.getText();
                        } else if (text == 'zip') {
                            zip = parser.getText();
                        } else if (text == 'filing_req_code') {
                            filing_req_code = parser.getText();
                        } else if (text == 'charity_check_last_modified') {
                            charity_check_last_modified = parser.getText();
                        } else if (text == 'pub78_church_message') {
                            //pub78_church_message = new Object(parser);
                        } else if (text == 'pub78_organization_name') {
                            pub78_organization_name = parser.getText();
                        } else if (text == 'pub78_ein') {
                            pub78_ein = parser.getText();
                        } else if (text == 'pub78_verified') {
                            pub78_verified = parser.getText();
                        } else if (text == 'pub78_city') {
                            pub78_city = parser.getText();
                        } else if (text == 'pub78_state') {
                            pub78_state = parser.getText();
                        } else if (text == 'pub78_indicator') {
                            pub78_indicator = parser.getText();
                        } else if (text == 'organization_types') {
                            organization_types = new List<Organization_types>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                organization_types.add(new Organization_types(parser));
                            }
                        } else if (text == 'most_recent_pub78') {
                            most_recent_pub78 = parser.getText();
                        } else if (text == 'most_recent_irb') {
                            most_recent_irb = parser.getText();
                        } else if (text == 'bmf_church_message') {
                            //bmf_church_message = new Object(parser);
                        } else if (text == 'bmf_organization_name') {
                            bmf_organization_name = parser.getText();
                        } else if (text == 'bmf_ein') {
                            bmf_ein = parser.getText();
                        } else if (text == 'bmf_status') {
                            bmf_status = parser.getText();
                        } else if (text == 'most_recent_bmf') {
                            most_recent_bmf = parser.getText();
                        } else if (text == 'bmf_subsection') {
                            bmf_subsection = parser.getText();
                        } else if (text == 'subsection_description') {
                            subsection_description = parser.getText();
                        } else if (text == 'foundation_code') {
                            foundation_code = parser.getText();
                        } else if (text == 'foundation_code_description') {
                            foundation_code_description = parser.getText();
                        } else if (text == 'ruling_month') {
                            ruling_month = parser.getText();
                        } else if (text == 'ruling_year') {
                            ruling_year = parser.getText();
                        } else if (text == 'adv_ruling_month') {
                            adv_ruling_month = parser.getText();
                        } else if (text == 'adv_ruling_year') {
                            adv_ruling_year = parser.getText();
                        } else if (text == 'group_exemption') {
                            group_exemption = parser.getText();
                        } else if (text == 'exempt_status_code') {
                            exempt_status_code = parser.getText();
                        } else if (text == 'ofac_status') {
                            ofac_status = parser.getText();
                        } else if (text == 'revocation_code') {
                            revocation_code = parser.getText();
                        } else if (text == 'revocation_date') {
                            revocation_date = parser.getText();
                        } else if (text == 'reinstatement_date') {
                            reinstatement_date = parser.getText();
                        } else if (text == 'irs_bmf_pub78_conflict') {
                            irs_bmf_pub78_conflict = parser.getText();
                        } else if (text == 'foundation_509a_status') {
                            foundation_509a_status = parser.getText();
                        } else if (text == 'irb_organization_id') {
                            irb_organization_id = parser.getText();
                        } else if (text == 'bulletin_number') {
                            bulletin_number = parser.getText();
                        } else if (text == 'bulletin_url') {
                            bulletin_url = parser.getText();
                        } else if (text == 'effective_date') {
                            effective_date = parser.getText();
                        } else if (text == 'irb_last_modified') {
                            irb_last_modified = parser.getText();
                        } else if (text == 'report_date') {
                            report_date = parser.getText();
                        } else if (text == 'foundation_type_code') {
                            foundation_type_code = parser.getText();
                        } else if (text == 'foundation_type_description') {
                            foundation_type_description = parser.getText();
                        } else if (text == 'parent_organizations') {
                            parent_organizations = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                parent_organizations.add(new Errors(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Charitycheck consuming unrecognized property: '+text);
                           // consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Forms_990T {
        public String form990t_name {get;set;} 
        public String form990t_url {get;set;} 

        public Forms_990T(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'form990t_name') {
                            form990t_name = parser.getText();
                        } else if (text == 'form990t_url') {
                            form990t_url = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Forms_990T consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Financials {
        public Most_recent_year_financials most_recent_year_financials {get;set;} 
        public Object f990_financials {get;set;} 
        public Object pf990_financials {get;set;} 
        public List<Financial_documents> financial_documents {get;set;} 
        public List<Forms_990T> forms_990T {get;set;} 
        public Object funding_needs {get;set;} 
        public List<Funding_sources> funding_sources {get;set;} 
        public Object financial_statements {get;set;} 
        public List<Annual_reports> annual_reports {get;set;} 
        public List<Errors> accounting_ratios {get;set;} 

        public Financials(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'most_recent_year_financials') {
                            most_recent_year_financials = new Most_recent_year_financials(parser);
                        } else if (text == 'f990_financials') {
                            //f990_financials = new Object(parser);
                        } else if (text == 'pf990_financials') {
                           // pf990_financials = new Object(parser);
                        } else if (text == 'financial_documents') {
                            financial_documents = new List<Financial_documents>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                financial_documents.add(new Financial_documents(parser));
                            }
                        } else if (text == 'forms_990T') {
                            forms_990T = new List<Forms_990T>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                forms_990T.add(new Forms_990T(parser));
                            }
                        } else if (text == 'funding_needs') {
                            //funding_needs = new Object(parser);
                        } else if (text == 'funding_sources') {
                            funding_sources = new List<Funding_sources>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                funding_sources.add(new Funding_sources(parser));
                            }
                        } else if (text == 'financial_statements') {
                            //financial_statements = new Object(parser);
                        } else if (text == 'annual_reports') {
                            annual_reports = new List<Annual_reports>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                annual_reports.add(new Annual_reports(parser));
                            }
                        } else if (text == 'accounting_ratios') {
                            accounting_ratios = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                accounting_ratios.add(new Errors(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Financials consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Accreditations {
        public String accreditation {get;set;} 
        public String year {get;set;} 

        public Accreditations(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'accreditation') {
                            accreditation = parser.getText();
                        } else if (text == 'year') {
                            year = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Accreditations consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Org_does_not_collect_for_Z {
        public Boolean full_time_staff {get;set;} 
        public Boolean part_time_staff {get;set;} 
        public Boolean senior_staff {get;set;} 

        public Org_does_not_collect_for_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'full_time_staff') {
                            full_time_staff = parser.getBooleanValue();
                        } else if (text == 'part_time_staff') {
                            part_time_staff = parser.getBooleanValue();
                        } else if (text == 'senior_staff') {
                            senior_staff = parser.getBooleanValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Org_does_not_collect_for_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Operations {
        public String leader_name {get;set;} 
        public Object leader_statement {get;set;} 
        public String leader_profile {get;set;} 
        public String co_leader_name {get;set;} 
        public String co_leader_profile {get;set;} 
        public Object no_of_employees {get;set;} 
        public Object no_of_volunteers {get;set;} 
        public Object organization_email {get;set;} 
        public Integer organization_details_year {get;set;} 
        public List<Errors> officers_directors_key_employees {get;set;} 
        public List<Errors> highest_paid_employees {get;set;} 
        public Integer employees_greater_than_100K {get;set;} 
        public String board_chair_name {get;set;} 
        public String board_chair_affiliation {get;set;} 
        public Object board_chair_term_start {get;set;} 
        public Object board_chair_term_end {get;set;} 
        public String board_co_chair_name {get;set;} 
        public String board_co_chair_affiliation {get;set;} 
        public Object board_co_chair_term_start {get;set;} 
        public Object board_co_chair_term_end {get;set;} 
        public List<Board_of_directors> board_of_directors {get;set;} 
        public List<Charting_impact_answers> board_leadership_practices {get;set;} 
        public Organization_demographics organization_demographics {get;set;} 
        public List<Errors> contractors {get;set;} 
        public Object blog_url {get;set;} 
        public String fundraising_contact_name {get;set;} 
        public String fundraising_contact_title {get;set;} 
        public String fundraising_contact_email {get;set;} 
        public String fundraising_contact_phone {get;set;} 
        public Object preparer_firm_name {get;set;} 
        public Object preparer_firm_address {get;set;} 
        public Object preparer_firm_ein {get;set;} 
        public Object preparer_firm_phone {get;set;} 
        public List<Errors> senior_staff {get;set;} 
        public List<Other_staff> other_staff {get;set;} 
        public List<Accreditations> accreditations {get;set;} 

        public Operations(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'leader_name') {
                            leader_name = parser.getText();
                        } else if (text == 'leader_statement') {
                            //leader_statement = new Object(parser);
                        } else if (text == 'leader_profile') {
                            leader_profile = parser.getText();
                        } else if (text == 'co_leader_name') {
                            co_leader_name = parser.getText();
                        } else if (text == 'co_leader_profile') {
                            co_leader_profile = parser.getText();
                        } else if (text == 'no_of_employees') {
                           // no_of_employees = new Object(parser);
                        } else if (text == 'no_of_volunteers') {
                           // no_of_volunteers = new Object(parser);
                        } else if (text == 'organization_email') {
                           // organization_email = new Object(parser);
                        } else if (text == 'organization_details_year') {
                            organization_details_year = parser.getIntegerValue();
                        } else if (text == 'officers_directors_key_employees') {
                            officers_directors_key_employees = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                officers_directors_key_employees.add(new Errors(parser));
                            }
                        } else if (text == 'highest_paid_employees') {
                            highest_paid_employees = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                highest_paid_employees.add(new Errors(parser));
                            }
                        } else if (text == 'employees_greater_than_100K') {
                            employees_greater_than_100K = parser.getIntegerValue();
                        } else if (text == 'board_chair_name') {
                            board_chair_name = parser.getText();
                        } else if (text == 'board_chair_affiliation') {
                            board_chair_affiliation = parser.getText();
                        } else if (text == 'board_chair_term_start') {
                            //board_chair_term_start = new Object(parser);
                        } else if (text == 'board_chair_term_end') {
                           // board_chair_term_end = new Object(parser);
                        } else if (text == 'board_co_chair_name') {
                            board_co_chair_name = parser.getText();
                        } else if (text == 'board_co_chair_affiliation') {
                            board_co_chair_affiliation = parser.getText();
                        } else if (text == 'board_co_chair_term_start') {
                            //board_co_chair_term_start = new Object(parser);
                        } else if (text == 'board_co_chair_term_end') {
                           // board_co_chair_term_end = new Object(parser);
                        } else if (text == 'board_of_directors') {
                            board_of_directors = new List<Board_of_directors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                board_of_directors.add(new Board_of_directors(parser));
                            }
                        } else if (text == 'board_leadership_practices') {
                            board_leadership_practices = new List<Charting_impact_answers>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                board_leadership_practices.add(new Charting_impact_answers(parser));
                            }
                        } else if (text == 'organization_demographics') {
                            organization_demographics = new Organization_demographics(parser);
                        } else if (text == 'contractors') {
                            contractors = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                contractors.add(new Errors(parser));
                            }
                        } else if (text == 'blog_url') {
                            //blog_url = new Object(parser);
                        } else if (text == 'fundraising_contact_name') {
                            fundraising_contact_name = parser.getText();
                        } else if (text == 'fundraising_contact_title') {
                            fundraising_contact_title = parser.getText();
                        } else if (text == 'fundraising_contact_email') {
                            fundraising_contact_email = parser.getText();
                        } else if (text == 'fundraising_contact_phone') {
                            fundraising_contact_phone = parser.getText();
                        } else if (text == 'preparer_firm_name') {
                           // preparer_firm_name = new Object(parser);
                        } else if (text == 'preparer_firm_address') {
                          //  preparer_firm_address = new Object(parser);
                        } else if (text == 'preparer_firm_ein') {
                          //  preparer_firm_ein = new Object(parser);
                        } else if (text == 'preparer_firm_phone') {
                           // preparer_firm_phone = new Object(parser);
                        } else if (text == 'senior_staff') {
                            senior_staff = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                senior_staff.add(new Errors(parser));
                            }
                        } else if (text == 'other_staff') {
                            other_staff = new List<Other_staff>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                other_staff.add(new Other_staff(parser));
                            }
                        } else if (text == 'accreditations') {
                            accreditations = new List<Accreditations>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                accreditations.add(new Accreditations(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Operations consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Board_of_directors {
        public String name {get;set;} 
        public Object title {get;set;} 
        public String company {get;set;} 

        public Board_of_directors(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'title') {
                            //title = new Object(parser);
                        } else if (text == 'company') {
                            company = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Board_of_directors consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Programs {
        public String name {get;set;} 
        public String description {get;set;} 
        public String target_population {get;set;} 
        public String budget {get;set;} 
        public Object keywords {get;set;} 

        public Programs(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'description') {
                            description = parser.getText();
                        } else if (text == 'target_population') {
                            target_population = parser.getText();
                        } else if (text == 'budget') {
                            budget = parser.getText();
                        } else if (text == 'keywords') {
                           // keywords = new Object(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Programs consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Financial_documents {
        public String form990_name {get;set;} 
        public String form990_year {get;set;} 
        public String form990_url {get;set;} 
        public String form990_source {get;set;} 

        public Financial_documents(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'form990_name') {
                            form990_name = parser.getText();
                        } else if (text == 'form990_year') {
                            form990_year = parser.getText();
                        } else if (text == 'form990_url') {
                            form990_url = parser.getText();
                        } else if (text == 'form990_source') {
                            form990_source = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Financial_documents consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Organization_demographics {
        public Integer total_board_members {get;set;} 
        public Integer total_fulltime_staff {get;set;} 
        public Object total_parttime_staff {get;set;} 
        public Integer total_senior_staff {get;set;} 
        public Boolean tracks_staffboardvol_retention {get;set;} 
        public Boolean tracks_staffboard_income {get;set;} 
        public Boolean tracks_staffboard_age {get;set;} 
        public Boolean tracks_vendor_diversity {get;set;} 
        public Boolean has_diversity_committee {get;set;} 
        public Boolean has_diversity_manager {get;set;} 
        public Boolean diversity_manager_fulltime {get;set;} 
        public Boolean diversity_plan {get;set;} 
        public Boolean supports_diversity_via_other_methods {get;set;} 
        public List<Categories> categories {get;set;} 

        public Organization_demographics(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'total_board_members') {
                            total_board_members = parser.getIntegerValue();
                        } else if (text == 'total_fulltime_staff') {
                            total_fulltime_staff = parser.getIntegerValue();
                        } else if (text == 'total_parttime_staff') {
                          //  total_parttime_staff = new Object(parser);
                        } else if (text == 'total_senior_staff') {
                            total_senior_staff = parser.getIntegerValue();
                        } else if (text == 'tracks_staffboardvol_retention') {
                            tracks_staffboardvol_retention = parser.getBooleanValue();
                        } else if (text == 'tracks_staffboard_income') {
                            tracks_staffboard_income = parser.getBooleanValue();
                        } else if (text == 'tracks_staffboard_age') {
                            tracks_staffboard_age = parser.getBooleanValue();
                        } else if (text == 'tracks_vendor_diversity') {
                            tracks_vendor_diversity = parser.getBooleanValue();
                        } else if (text == 'has_diversity_committee') {
                            has_diversity_committee = parser.getBooleanValue();
                        } else if (text == 'has_diversity_manager') {
                            has_diversity_manager = parser.getBooleanValue();
                        } else if (text == 'diversity_manager_fulltime') {
                            diversity_manager_fulltime = parser.getBooleanValue();
                        } else if (text == 'diversity_plan') {
                            diversity_plan = parser.getBooleanValue();
                        } else if (text == 'supports_diversity_via_other_methods') {
                            supports_diversity_via_other_methods = parser.getBooleanValue();
                        } else if (text == 'categories') {
                            categories = new List<Categories>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                categories.add(new Categories(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Organization_demographics consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Years {
        public Integer year {get;set;} 
        public Double value {get;set;} 

        public Years(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'year') {
                            year = parser.getIntegerValue();
                        } else if (text == 'value') {
                            value = parser.getDoubleValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Years consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Categories {
        public String category {get;set;} 
        public Org_does_not_collect_for org_does_not_collect_for {get;set;} 
        public List<Subcategories> subcategories {get;set;} 

        public Categories(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'category') {
                            category = parser.getText();
                        } else if (text == 'org_does_not_collect_for') {
                            org_does_not_collect_for = new Org_does_not_collect_for(parser);
                        } else if (text == 'subcategories') {
                            subcategories = new List<Subcategories>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                subcategories.add(new Subcategories(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Categories consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Charting_impact_answers {
        public String question {get;set;} 
        public String answer {get;set;} 

        public Charting_impact_answers(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'question') {
                            question = parser.getText();
                        } else if (text == 'answer') {
                            answer = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Charting_impact_answers consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Funding_sources {
        public String funding_source {get;set;} 
        public String funding_amount {get;set;} 

        public Funding_sources(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'funding_source') {
                            funding_source = parser.getText();
                        } else if (text == 'funding_amount') {
                            funding_amount = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Funding_sources consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Programs_Z {
        public List<Programs> programs {get;set;} 
        public List<Platinum_metrics> platinum_metrics {get;set;} 
        public List<Charting_impact_answers> charting_impact_answers {get;set;} 

        public Programs_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'programs') {
                            programs = new List<Programs>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                programs.add(new Programs(parser));
                            }
                        } else if (text == 'platinum_metrics') {
                            platinum_metrics = new List<Platinum_metrics>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                platinum_metrics.add(new Platinum_metrics(parser));
                            }
                        } else if (text == 'charting_impact_answers') {
                            charting_impact_answers = new List<Charting_impact_answers>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                charting_impact_answers.add(new Charting_impact_answers(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Programs_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Data {
        public Summary summary {get;set;} 
        public Programs_Z programs {get;set;} 
        public Financials financials {get;set;} 
        public Operations operations {get;set;} 
        public Charitycheck charitycheck {get;set;} 

        public Data(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'summary') {
                            summary = new Summary(parser);
                        } else if (text == 'programs') {
                            programs = new Programs_Z(parser);
                        } else if (text == 'financials') {
                            financials = new Financials(parser);
                        } else if (text == 'operations') {
                            operations = new Operations(parser);
                        } else if (text == 'charitycheck') {
                            charitycheck = new Charitycheck(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Org_does_not_collect_for {
        public Boolean board_members {get;set;} 
        public Boolean full_time_staff {get;set;} 
        public Boolean part_time_staff {get;set;} 
        public Boolean senior_staff {get;set;} 

        public Org_does_not_collect_for(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'board_members') {
                            board_members = parser.getBooleanValue();
                        } else if (text == 'full_time_staff') {
                            full_time_staff = parser.getBooleanValue();
                        } else if (text == 'part_time_staff') {
                            part_time_staff = parser.getBooleanValue();
                        } else if (text == 'senior_staff') {
                            senior_staff = parser.getBooleanValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Org_does_not_collect_for consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Most_recent_year_financials {
        public Integer fiscal_year {get;set;} 
        public Object form_type {get;set;} 
        public String data_source {get;set;} 
        public Double assets_total {get;set;} 
        public Double total_liabilities {get;set;} 
        public Double revenue_contributions {get;set;} 
        public Object revenue_govt_grants {get;set;} 
        public Double revenue_program_services {get;set;} 
        public Object revenue_investments {get;set;} 
        public Object revenue_special_events {get;set;} 
        public Object revenue_sales {get;set;} 
        public Object revenue_other {get;set;} 
        public Double total_revenue {get;set;} 
        public Double expense_administration {get;set;} 
        public Object expense_program_services {get;set;} 
        public Object expense_fundraising {get;set;} 
        public Object expense_accounting {get;set;} 
        public Object expense_advertising_promotion {get;set;} 
        public Object expense_info_technology {get;set;} 
        public Object expense_insurance {get;set;} 
        public Object expense_interest {get;set;} 
        public Object expense_investment_management {get;set;} 
        public Object expense_legal {get;set;} 
        public Object expense_pension_plan {get;set;} 
        public Object expense_professional_fundraising {get;set;} 
        public Object expense_professional_fees {get;set;} 
        public Object expense_publications {get;set;} 
        public Object expense_operating_admin {get;set;} 
        public Object expense_gifts_grants_paid {get;set;} 
        public Object total_expense_disbursements {get;set;} 
        public Double expenses_total {get;set;} 
        public Object net_gain_loss {get;set;} 
        public Object cash_and_equivalent_assets {get;set;} 
        public Object investments_us_government {get;set;} 
        public Object investments_stock {get;set;} 
        public Object investments_bonds {get;set;} 
        public Object investments_other {get;set;} 
        public Object land_buildings_equipment {get;set;} 
        public Object other_assets {get;set;} 

        public Most_recent_year_financials(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'fiscal_year') {
                            fiscal_year = parser.getIntegerValue();
                        } else if (text == 'form_type') {
                          //  form_type = new Object(parser);
                        } else if (text == 'data_source') {
                            data_source = parser.getText();
                        } else if (text == 'assets_total') {
                            assets_total = parser.getDoubleValue();
                        } else if (text == 'total_liabilities') {
                            total_liabilities = parser.getDoubleValue();
                        } else if (text == 'revenue_contributions') {
                            revenue_contributions = parser.getDoubleValue();
                        } else if (text == 'revenue_govt_grants') {
                          //  revenue_govt_grants = new Object(parser);
                        } else if (text == 'revenue_program_services') {
                            revenue_program_services = parser.getDoubleValue();
                        } else if (text == 'revenue_investments') {
                          //  revenue_investments = new Object(parser);
                        } else if (text == 'revenue_special_events') {
                           // revenue_special_events = new Object(parser);
                        } else if (text == 'revenue_sales') {
                           // revenue_sales = new Object(parser);
                        } else if (text == 'revenue_other') {
                           // revenue_other = new Object(parser);
                        } else if (text == 'total_revenue') {
                            total_revenue = parser.getDoubleValue();
                        } else if (text == 'expense_administration') {
                            expense_administration = parser.getDoubleValue();
                        } else if (text == 'expense_program_services') {
                            //expense_program_services = new Object(parser);
                        } else if (text == 'expense_fundraising') {
                            //expense_fundraising = new Object(parser);
                        } else if (text == 'expense_accounting') {
                           // expense_accounting = new Object(parser);
                        } else if (text == 'expense_advertising_promotion') {
                           // expense_advertising_promotion = new Object(parser);
                        } else if (text == 'expense_info_technology') {
                           // expense_info_technology = new Object(parser);
                        } else if (text == 'expense_insurance') {
                           // expense_insurance = new Object(parser);
                        } else if (text == 'expense_interest') {
                           // expense_interest = new Object(parser);
                        } else if (text == 'expense_investment_management') {
                           // expense_investment_management = new Object(parser);
                        } else if (text == 'expense_legal') {
                           // expense_legal = new Object(parser);
                        } else if (text == 'expense_pension_plan') {
                           // expense_pension_plan = new Object(parser);
                        } else if (text == 'expense_professional_fundraising') {
                            //expense_professional_fundraising = new Object(parser);
                        } else if (text == 'expense_professional_fees') {
                           // expense_professional_fees = new Object(parser);
                        } else if (text == 'expense_publications') {
                          //  expense_publications = new Object(parser);
                        } else if (text == 'expense_operating_admin') {
                           // expense_operating_admin = new Object(parser);
                        } else if (text == 'expense_gifts_grants_paid') {
                           // expense_gifts_grants_paid = new Object(parser);
                        } else if (text == 'total_expense_disbursements') {
                            //total_expense_disbursements = new Object(parser);
                        } else if (text == 'expenses_total') {
                            expenses_total = parser.getDoubleValue();
                        } else if (text == 'net_gain_loss') {
                            //net_gain_loss = new Object(parser);
                        } else if (text == 'cash_and_equivalent_assets') {
                            //cash_and_equivalent_assets = new Object(parser);
                        } else if (text == 'investments_us_government') {
                            //investments_us_government = new Object(parser);
                        } else if (text == 'investments_stock') {
                            //investments_stock = new Object(parser);
                        } else if (text == 'investments_bonds') {
                            //investments_bonds = new Object(parser);
                        } else if (text == 'investments_other') {
                           // investments_other = new Object(parser);
                        } else if (text == 'land_buildings_equipment') {
                           // land_buildings_equipment = new Object(parser);
                        } else if (text == 'other_assets') {
                            //other_assets = new Object(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Most_recent_year_financials consuming unrecognized property: '+text);
                           // consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Errors {

        public Errors(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        {
                            System.debug(LoggingLevel.WARN, 'Errors consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Other_documents {
        public String document_name {get;set;} 
        public String document_year {get;set;} 
        public String otherdocument_contents {get;set;} 
        public String document_url {get;set;} 

        public Other_documents(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'document_name') {
                            document_name = parser.getText();
                        } else if (text == 'document_year') {
                            document_year = parser.getText();
                        } else if (text == 'otherdocument_contents') {
                            otherdocument_contents = parser.getText();
                        } else if (text == 'document_url') {
                            document_url = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Other_documents consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Organization_types {
        public String organization_type {get;set;} 
        public String deductibility_limitation {get;set;} 
        public String deductibility_status_description {get;set;} 

        public Organization_types(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'organization_type') {
                            organization_type = parser.getText();
                        } else if (text == 'deductibility_limitation') {
                            deductibility_limitation = parser.getText();
                        } else if (text == 'deductibility_status_description') {
                            deductibility_status_description = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Other_staff consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Summary {
        public Integer organization_id {get;set;} 
        public String organization_name {get;set;} 
        public String ein {get;set;} 
        public String bridge_id {get;set;} 
        public String address_line_1 {get;set;} 
        public String address_line_2 {get;set;} 
        public String city {get;set;} 
        public String state {get;set;} 
        public String zip {get;set;} 
        public String fax {get;set;} 
        public String govt_registered_name {get;set;} 
        public String also_known_as {get;set;} 
        public String fiscal_year_end {get;set;} 
        public String fiscal_year_start {get;set;} 
        public String affiliation_code {get;set;} 
        public String affiliation_description {get;set;} 
        public String contact_name {get;set;} 
        public String contact_title {get;set;} 
        public String contact_email {get;set;} 
        public String contact_phone {get;set;} 
        public String contact_fax {get;set;} 
        public String gs_profile_update_level {get;set;} 
        public String gs_profile_update_level_logo {get;set;} 
        public String deductibility_code {get;set;} 
        public String deductibility_description {get;set;} 
        public String donation_to_ein {get;set;} 
        public String donation_to_name {get;set;} 
        public Object areas_served_narrative {get;set;} 
        public String ruling_year {get;set;} 
        public String gs_public_report {get;set;} 
        public String gs_premium_pdf {get;set;} 
        public Object impact_statement {get;set;} 
        public String incorporation_year {get;set;} 
        public String subsection_code {get;set;} 
        public String subsection_description {get;set;} 
        public String keywords {get;set;} 
        public String logo_url {get;set;} 
        public String mission {get;set;} 
        public Boolean is_national_hq {get;set;} 
        public String ntee_code {get;set;} 
        public String website_url {get;set;} 
        public String year_founded {get;set;} 
        public String year_incorporated {get;set;} 
        public List<Addresses> addresses {get;set;} 
        public Object affiliations {get;set;} 
        public Object awards {get;set;} 
        public List<Formerly_known_as> formerly_known_as {get;set;} 
        public List<Errors> forms_1023_1024 {get;set;} 
        public List<Letters_of_determination> letters_of_determination {get;set;} 
        public Object letters_of_dissolution {get;set;} 
        public List<Ntee_codes> ntee_codes {get;set;} 
        public Naics_code naics_code {get;set;} 
        public List<Sic_codes> sic_codes {get;set;} 
        public List<Other_documents> other_documents {get;set;} 
        public List<Photos> photos {get;set;} 
        public List<String> social_media_urls {get;set;} 
        public List<Telephone_numbers> telephone_numbers {get;set;} 
        public List<Videos> videos {get;set;} 

        public Summary(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'organization_id') {
                            organization_id = parser.getIntegerValue();
                        } else if (text == 'organization_name') {
                            organization_name = parser.getText();
                        } else if (text == 'ein') {
                            ein = parser.getText();
                        } else if (text == 'bridge_id') {
                            bridge_id = parser.getText();
                        } else if (text == 'address_line_1') {
                            address_line_1 = parser.getText();
                        } else if (text == 'address_line_2') {
                            address_line_2 = parser.getText();
                        } else if (text == 'city') {
                            city = parser.getText();
                        } else if (text == 'state') {
                            state = parser.getText();
                        } else if (text == 'zip') {
                            zip = parser.getText();
                        } else if (text == 'fax') {
                            fax = parser.getText();
                        } else if (text == 'govt_registered_name') {
                            govt_registered_name = parser.getText();
                        } else if (text == 'also_known_as') {
                            also_known_as = parser.getText();
                        } else if (text == 'fiscal_year_end') {
                            fiscal_year_end = parser.getText();
                        } else if (text == 'fiscal_year_start') {
                            fiscal_year_start = parser.getText();
                        } else if (text == 'affiliation_code') {
                            affiliation_code = parser.getText();
                        } else if (text == 'affiliation_description') {
                            affiliation_description = parser.getText();
                        } else if (text == 'contact_name') {
                            contact_name = parser.getText();
                        } else if (text == 'contact_title') {
                            contact_title = parser.getText();
                        } else if (text == 'contact_email') {
                            contact_email = parser.getText();
                        } else if (text == 'contact_phone') {
                            contact_phone = parser.getText();
                        } else if (text == 'contact_fax') {
                            contact_fax = parser.getText();
                        } else if (text == 'gs_profile_update_level') {
                            gs_profile_update_level = parser.getText();
                        } else if (text == 'gs_profile_update_level_logo') {
                            gs_profile_update_level_logo = parser.getText();
                        } else if (text == 'deductibility_code') {
                            deductibility_code = parser.getText();
                        } else if (text == 'deductibility_description') {
                            deductibility_description = parser.getText();
                        } else if (text == 'donation_to_ein') {
                            donation_to_ein = parser.getText();
                        } else if (text == 'donation_to_name') {
                            donation_to_name = parser.getText();
                        } else if (text == 'areas_served_narrative') {
                            //areas_served_narrative = new Object(parser);
                        } else if (text == 'ruling_year') {
                            ruling_year = parser.getText();
                        } else if (text == 'gs_public_report') {
                            gs_public_report = parser.getText();
                        } else if (text == 'gs_premium_pdf') {
                            gs_premium_pdf = parser.getText();
                        } else if (text == 'impact_statement') {
                            //impact_statement = new Object(parser);
                        } else if (text == 'incorporation_year') {
                            incorporation_year = parser.getText();
                        } else if (text == 'subsection_code') {
                            subsection_code = parser.getText();
                        } else if (text == 'subsection_description') {
                            subsection_description = parser.getText();
                        } else if (text == 'keywords') {
                            keywords = parser.getText();
                        } else if (text == 'logo_url') {
                            logo_url = parser.getText();
                        } else if (text == 'mission') {
                            mission = parser.getText();
                        } else if (text == 'is_national_hq') {
                            is_national_hq = parser.getBooleanValue();
                        } else if (text == 'ntee_code') {
                            ntee_code = parser.getText();
                        } else if (text == 'website_url') {
                            website_url = parser.getText();
                        } else if (text == 'year_founded') {
                            year_founded = parser.getText();
                        } else if (text == 'year_incorporated') {
                            year_incorporated = parser.getText();
                        } else if (text == 'addresses') {
                            addresses = new List<Addresses>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                addresses.add(new Addresses(parser));
                            }
                        } else if (text == 'affiliations') {
                           // affiliations = new Object(parser);
                        } else if (text == 'awards') {
                            //awards = new Object(parser);
                        } else if (text == 'formerly_known_as') {
                            formerly_known_as = new List<Formerly_known_as>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                formerly_known_as.add(new Formerly_known_as(parser));
                            }
                        } else if (text == 'forms_1023_1024') {
                            forms_1023_1024 = new List<Errors>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                forms_1023_1024.add(new Errors(parser));
                            }
                        } else if (text == 'letters_of_determination') {
                            letters_of_determination = new List<Letters_of_determination>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                letters_of_determination.add(new Letters_of_determination(parser));
                            }
                        } else if (text == 'letters_of_dissolution') {
                           // letters_of_dissolution = new Object(parser);
                        } else if (text == 'ntee_codes') {
                            ntee_codes = new List<Ntee_codes>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                ntee_codes.add(new Ntee_codes(parser));
                            }
                        } else if (text == 'naics_code') {
                            naics_code = new Naics_code(parser);
                        } else if (text == 'sic_codes') {
                            sic_codes = new List<Sic_codes>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                sic_codes.add(new Sic_codes(parser));
                            }
                        } else if (text == 'other_documents') {
                            other_documents = new List<Other_documents>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                other_documents.add(new Other_documents(parser));
                            }
                        } else if (text == 'photos') {
                            photos = new List<Photos>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                photos.add(new Photos(parser));
                            }
                        } else if (text == 'social_media_urls') {
                            social_media_urls = new List<String>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                //social_media_urls.add(new String(parser));
                            }
                        } else if (text == 'telephone_numbers') {
                            telephone_numbers = new List<Telephone_numbers>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                telephone_numbers.add(new Telephone_numbers(parser));
                            }
                        } else if (text == 'videos') {
                            videos = new List<Videos>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                videos.add(new Videos(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Summary consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Other_staff {
        public String name {get;set;} 
        public String title {get;set;} 
        //public String type_Z {get;set;} // in json: type

        public Other_staff(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'title') {
                            title = parser.getText();
                        } else if (text == 'type') {
                           // type_Z = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Other_staff consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Platinum_metrics {
        public String metric {get;set;} 
        public List<Years> years {get;set;} 
        public List<String> target_population_served {get;set;} 

        public Platinum_metrics(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'metric') {
                            metric = parser.getText();
                        } else if (text == 'years') {
                            years = new List<Years>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                years.add(new Years(parser));
                            }
                        } else if (text == 'target_population_served') {
                            target_population_served = new List<String>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                              //  target_population_served.add(new String(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'Platinum_metrics consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Ntee_codes {
        public String ntee_code {get;set;} 
        public String primary_code {get;set;} 
        public String primary_description {get;set;} 
        public String sub_code {get;set;} 
        public String sub_description {get;set;} 

        public Ntee_codes(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'ntee_code') {
                            ntee_code = parser.getText();
                        } else if (text == 'primary_code') {
                            primary_code = parser.getText();
                        } else if (text == 'primary_description') {
                            primary_description = parser.getText();
                        } else if (text == 'sub_code') {
                            sub_code = parser.getText();
                        } else if (text == 'sub_description') {
                            sub_description = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Ntee_codes consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Naics_code {
        public String naics_code {get;set;} 
        public String naics_description {get;set;} 

        public Naics_code(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'naics_code') {
                            naics_code = parser.getText();
                        } else if (text == 'naics_description') {
                            naics_description = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Naics_code consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static JSON2Apex parse(String json) {
        return new JSON2Apex(System.JSON.createParser(json));
    }
}